generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  name              String?
  emailVerified     DateTime?
  image             String?
  password          String?
  mobileNumber      String?
  enableNotifications Boolean   @default(false)
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  meals             Meal[]
  foodLogs          FoodLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Meal {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  type        String     @default("breakfast")
  date        DateTime
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  foodLogs    FoodLog[]
  reminder    Json?      // Store reminder as JSON object with time and enabled fields
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([date])
  @@map("meals")
}

model FoodLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  calories  Int
  protein   Float?
  carbs     Float?
  fat       Float?
  portion   String?
  meal      Meal     @relation(fields: [mealId], references: [id])
  mealId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("food_logs")
}